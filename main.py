import telebot
from telebot import types
import sqlite3
from datetime import datetime, timedelta
from apscheduler.schedulers.background import BackgroundScheduler
from pytz import timezone
import os
import logging
from dotenv import load_dotenv

logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

load_dotenv()

# Get the token from environment variable
BOT_TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')

if not BOT_TOKEN:
    logger.error("No TELEGRAM_BOT_TOKEN found in environment variables")
    raise ValueError("No TELEGRAM_BOT_TOKEN found in environment variables")

logger.info("Loaded bot token")

bot = telebot.TeleBot(BOT_TOKEN)

def init_db():
    conn = sqlite3.connect('products.db')
    cursor = conn.cursor()
    cursor.execute('''
    CREATE TABLE IF NOT EXISTS products (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        user_id INTEGER,
        photo TEXT,
        expiration_date TEXT,
        returnable BOOLEAN
    )
    ''')
    conn.commit()
    conn.close()


# Welcome message and prompts
welcome_text = '''–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—éüëã. –≠—Ç–æ—Ç –±–æ—Ç –±—É–¥–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å –æ–± –æ–∫–æ–Ω—á–∞–Ω–∏–∏ —Å—Ä–æ–∫–∞ –≥–æ–¥–Ω–æ—Å—Ç–∏ —Ç–æ–≤–∞—Ä–æ–≤.
–ß—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä, –Ω–æ–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ'''
return_item = "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏—è —Å—Ä–æ–∫–∞ –≥–æ–¥–Ω–æ—Å—Ç–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ \"–¥–¥.–º–º.–≥–≥–≥–≥\"."


# Command handler for /start
@bot.message_handler(commands=['start'])
def start(message):
    bot.send_message(message.chat.id, welcome_text)
    show_main_menu(message)


@bot.message_handler(func=lambda message: True, content_types=['text'])
def handle_text(message):
    if message.text == '–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π —Ç–æ–≤–∞—Ä':
        bot.send_message(message.chat.id, '–û—Ç–ø—Ä–∞–≤—å —Ñ–æ—Ç–æ —Ç–æ–≤–∞—Ä–∞ü´°')
        bot.register_next_step_handler(message, handle_photo)
    elif message.text == '–ü–æ–º–æ—â—å':
        help_text = """
–ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞:
/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º
–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π —Ç–æ–≤–∞—Ä - –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π —Ç–æ–≤–∞—Ä —Å —Ñ–æ—Ç–æ –∏ –¥–∞—Ç–æ–π
–°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ - –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –≤–∞—à–∏ —Ç–æ–≤–∞—Ä—ã
        """
        bot.send_message(message.chat.id, help_text)
        show_main_menu(message)
    elif message.text == '–°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤':
        list_products(message)
    else:
        try:
            # Assume that user input is an expiration date
            date_text = message.text.strip().replace('-', '.').replace('/', '.').replace(' ', '.').replace(',', '.')
            exp_date = datetime.strptime(date_text, "%d.%m.%Y").date()

            if exp_date < datetime.today().date():
                bot.send_message(message.chat.id, "–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è —Å—Ä–æ–∫–∞ –≥–æ–¥–Ω–æ—Å—Ç–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤ –ø—Ä–æ—à–ª–æ–º. –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –¥–∞—Ç—É.")
                bot.register_next_step_handler(message, handle_text)
                return
            
            # If the user sends a date without selecting returnable, register it as non-returnable
            if message.chat.id in user_photos:
                photo = user_photos.pop(message.chat.id)

                # Save the non-returnable item
                conn = sqlite3.connect('products.db')
                cursor = conn.cursor()
                cursor.execute("INSERT INTO products (user_id, photo, expiration_date, returnable) VALUES (?, ?, ?, ?)",
                               (message.from_user.id, photo, exp_date.strftime("%Y-%m-%d"), False))
                conn.commit()
                conn.close()

                bot.send_message(message.chat.id, f"–¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω!ü§ó")

                # After saving, return to the main menu (no more next step handlers)
                show_main_menu(message)
        except ValueError:
            bot.send_message(message.chat.id, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –¥–∞—Ç–∞. –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ \"–¥–¥.–º–º.–≥–≥–≥–≥\".")
            bot.register_next_step_handler(message, handle_text)

def show_main_menu(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    btn_add_item = types.KeyboardButton('–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π —Ç–æ–≤–∞—Ä')
    btn_list_items = types.KeyboardButton('–°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤')
    btn_help = types.KeyboardButton('–ü–æ–º–æ—â—å')
    markup.row(btn_add_item, btn_list_items)
    markup.row(btn_help)
    bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', reply_markup=markup)


# Temporary storage for user photo data (user_id -> file_id)
user_photos = {}


def handle_photo(message):
    if message.photo:
        # Get the highest resolution photo
        photo = message.photo[-1].file_id

        # Store the photo file_id in the dictionary with user_id as key
        user_photos[message.chat.id] = photo

        # Add inline button for '–í–æ–∑–≤—Ä–∞—Ç–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è' with simple callback data
        markup = types.InlineKeyboardMarkup()
        btn_returnable = types.InlineKeyboardButton('–í–æ–∑–≤—Ä–∞—Ç–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è', callback_data='return_item')
        markup.add(btn_returnable)

        # Message prompting either a date or the returnable selection
        bot.send_message(message.chat.id,
                         "–ï—Å–ª–∏ —Ç–æ–≤–∞—Ä –≤–æ–∑–≤—Ä–∞—Ç–Ω—ã–π, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, –∏–Ω–∞—á–µ –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏—è —Å—Ä–æ–∫–∞ –≥–æ–¥–Ω–æ—Å—Ç–∏ –≤"
                         "—Ñ–æ—Ä–º–∞—Ç–µ \"–¥–¥.–º–º.–≥–≥–≥–≥\".",
                         reply_markup=markup)
        # Don't register a next step handler here!


@bot.callback_query_handler(func=lambda call: call.data == 'return_item')
def handle_returnable_category(call):
    # Retrieve the photo file_id from the user_photos dictionary using chat_id
    photo_file_id = user_photos.get(call.message.chat.id)

    if not photo_file_id:
        bot.send_message(call.message.chat.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ —Ç–æ–≤–∞—Ä–∞ –∑–∞–Ω–æ–≤–æ.")
        bot.register_next_step_handler(call.message, handle_photo)
        return

    # Inform the user that they should send the expiration date
    bot.answer_callback_query(call.id, "–í—ã –≤—ã–±—Ä–∞–ª–∏ –≤–æ–∑–≤—Ä–∞—Ç–Ω—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é")
    bot.send_message(call.message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏—è —Å—Ä–æ–∫–∞ –≥–æ–¥–Ω–æ—Å—Ç–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ \"–¥–¥.–º–º.–≥–≥–≥–≥\".")

    # Register the next step handler for the expiration date input (for returnable items)
    bot.register_next_step_handler(call.message, handle_date, photo_file_id, returnable=True)


# Handle receiving date
def handle_date(message, photo, returnable):
    try:
        # Normalize the date format by replacing common separators with dots
        date_text = message.text.strip().replace('-', '.').replace('/', '.').replace(' ', '.').replace(',', '.')

        # Validate and parse the date entered by the user
        exp_date = datetime.strptime(date_text, "%d.%m.%Y").date()

        # Adjust the expiration date if the item is returnable (4 days before actual expiry)
        adjusted_exp_date = exp_date - timedelta(days=4) if returnable else exp_date

        # Check if the adjusted expiration date is in the future
        if adjusted_exp_date < datetime.today().date():
            bot.send_message(message.chat.id, "–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è —Å—Ä–æ–∫–∞ –≥–æ–¥–Ω–æ—Å—Ç–∏ –∏–ª–∏ –≤–æ–∑–≤—Ä–∞—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤ –ø—Ä–æ—à–ª–æ–º."
                                              " –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –¥–∞—Ç—É.")
            bot.register_next_step_handler(message, handle_date, photo, returnable)
            return

        # Insert into SQLite
        conn = sqlite3.connect('products.db')
        cursor = conn.cursor()
        cursor.execute("INSERT INTO products (user_id, photo, expiration_date, returnable) VALUES (?, ?, ?, ?)",
                       (message.from_user.id, photo, exp_date.strftime("%Y-%m-%d"), returnable))
        conn.commit()
        conn.close()

        # Send confirmation message
        bot.send_message(message.chat.id, "–¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω!ü§ó")
        show_main_menu(message)

    except ValueError:
        bot.send_message(message.chat.id, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –¥–∞—Ç–∞. –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ \"–¥–¥.–º–º.–≥–≥–≥–≥\".")
        bot.register_next_step_handler(message, handle_date, photo, returnable)
    except Exception as e:
        bot.send_message(message.chat.id, f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")


# Reminder function
def check_expiry():
    conn = sqlite3.connect('products.db')
    cursor = conn.cursor()

    today = datetime.today().date()
    yesterday = today - timedelta(days=1)

    # Check for items expiring today
    cursor.execute("SELECT * FROM products WHERE expiration_date = ?", (today.strftime("%Y-%m-%d"),))
    expiring_today = cursor.fetchall()
    expiring_returnable_item = today + timedelta(days=4)
    cursor.execute("SELECT * FROM products WHERE expiration_date = ? AND returnable = ?",
                   (expiring_returnable_item.strftime("%Y-%m-%d"), True))
    expiring_returnable_item = cursor.fetchall()
    expiring_items = expiring_today + expiring_returnable_item

    for row in expiring_items:
        product_id, user_id, photo, expiration_date, returnable = row
        try:
            bot.send_photo(user_id, photo, caption="–ù–∞–ø–æ–º–∏–Ω–∞–µ–º! –°—Ä–æ–∫ –≥–æ–¥–Ω–æ—Å—Ç–∏ —ç—Ç–æ–≥–æ —Ç–æ–≤–∞—Ä–∞ –∏—Å—Ç–µ–∫ —Å–µ–≥–æ–¥–Ω—è!")
            if returnable:
                bot.send_message(user_id,
                                 "–≠—Ç–æ—Ç —Ç–æ–≤–∞—Ä –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –∫ –≤–æ–∑–≤—Ä–∞—Ç–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏. –ù–µ –∑–∞–±—É–¥—å—Ç–µ –≤–µ—Ä–Ω—É—Ç—å –µ–≥–æ!")

        except Exception as e:
            print(f"Error sending notification: {e}")

    # Delete items that expired yesterday
    cursor.execute("DELETE FROM products WHERE expiration_date = ?", (yesterday.strftime("%Y-%m-%d"),))
    deleted_count = cursor.rowcount
    print(f"Deleted {deleted_count} expired items.")
    conn.commit()
    conn.close()


def list_products(message):
    conn = sqlite3.connect('products.db')
    cursor = conn.cursor()
    cursor.execute("SELECT id, expiration_date, returnable FROM products WHERE user_id = ?", (message.from_user.id,))
    products = cursor.fetchall()
    conn.close()

    if products:
        response = "–í–∞—à–∏ —Ç–æ–≤–∞—Ä—ã:\n"
        for product in products:
            product_id, exp_date, returnable = product
            response += f"ID: {product_id}, –°—Ä–æ–∫ –≥–æ–¥–Ω–æ—Å—Ç–∏: {exp_date}, {'–í–æ–∑–≤—Ä–∞—Ç–Ω—ã–π' if returnable else '–ù–µ–≤–æ–∑–≤—Ä–∞—Ç–Ω—ã–π'}\n"
        bot.send_message(message.chat.id, response)
    else:
        bot.send_message(message.chat.id, "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤.")


# checks expiry every 24 hours
def init_scheduler():
    local_scheduler = BackgroundScheduler()
    local_scheduler.add_job(check_expiry, 'cron', hour=5, minute=0, timezone=timezone('Europe/Moscow'))
    local_scheduler.start()
    return local_scheduler


# main execution block
if __name__ == '__main__':
    init_db()
    scheduler = init_scheduler()
    try:
        bot.polling(none_stop=True)
    except KeyboardInterrupt:
        scheduler.shutdown()
        logger.info("Bot stopped.")
